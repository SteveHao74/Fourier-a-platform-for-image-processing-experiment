#第八章 形态学图像处理

#【8.2】 图像膨胀与腐蚀

import cv2
import numpy as np
import matplotlib.pyplot as plt


#读取图像
# img = cv2.imread('new1.jpg')
img=np.mat([
 [  0,0,0,0,0,0,0,0,0,0,0],
 [  0,0,0,0,0,0,0,0,0,0,0],
 [ 0,0,0,0,0,0,0,0,0,0,0],
 [  0,0,0,0 ,255, 255, 255, 255,0,0,0],
 [  0,0,0,0  , 0 ,255 ,255, 255,0,0,0],
 [0,0,0,255 ,255, 255, 255, 255,0,0,0],
 [0,0,0,255 ,255 , 0 ,255 ,255,0,0,0],
 [ 0,0,0,0,0,0,0,0,0,0,0],
[  0,0,0,0,0,0,0,0,0,0,0],
[  0,0,0,0,0,0,0,0,0,0,0]],np.uint8)

img_inverse= np.ones((10,11),np.uint8)*255

print(img)
#设置卷积核
kernel_1 = cv2.getStructuringElement(cv2.MORPH_CROSS,(3, 3),(1,1))
kernel_2=np.array([[1],[1]])
kernel_3 = np.zeros((3,3),np.uint8)
kernel_3[1,0]=1;
kernel_3[1,1]=1;
kernel_3[1,2]=1;

print(type(kernel_3))
kernel_4 = np.ones((2,2),np.uint8)
kernel_5=np.array([[1,1]])

print(kernel_3)
# 腐蚀图像
eroded_1 = cv2.erode(img, kernel_1)
eroded_2 = cv2.erode(img, kernel_2,iterations = 1,anchor=(0,0))
eroded_3 = cv2.erode(img, kernel_3,iterations = 1,anchor=(1,0))
eroded_4 = cv2.erode(img, kernel_4,iterations = 1,anchor=(0,0))
eroded_5 = cv2.erode(img, kernel_5,iterations = 1,anchor=(0,0))
eroded_6 = cv2.erode(img, kernel_5,iterations = 1,anchor=(1,0))

#膨胀图像
dilated_1 = cv2.dilate(img, kernel_1)
dilated_2 = cv2.dilate(img, kernel_2,iterations = 1,anchor=(0,0))
dilated_3 = cv2.dilate(img, kernel_3,iterations = 1,anchor=(1,0))
dilated_4 = cv2.dilate(img, kernel_4,iterations = 1,anchor=(0,0))
dilated_7 = cv2.dilate(img, kernel_4,iterations = 1,anchor=(1,1))
dilated_5 = cv2.dilate(img, kernel_5,iterations = 1,anchor=(0,0))
dilated_6 = cv2.dilate(img, kernel_5,iterations = 1,anchor=(1,0))
print(dilated_4-dilated_7)
#用来正常显示中文标签
plt.rcParams['font.sans-serif']=['SimHei']
#图像显示
plt.figure(figsize=(10, 5))  # width * height
plt.subplot(241), plt.imshow(img_inverse-img, cmap = 'gray'),plt.title('原始图像'),plt.axis("off")
print(img_inverse-img)
plt.subplot(242), plt.imshow(img_inverse-eroded_1, cmap = 'gray'),plt.title('图像腐蚀_核1'),plt.axis("off")
plt.subplot(243), plt.imshow(img_inverse-eroded_2, cmap = 'gray'),plt.title('图像腐蚀_核2'),plt.axis("off")
plt.subplot(244), plt.imshow(img_inverse-eroded_3, cmap = 'gray'),plt.title('图像腐蚀_核3'),plt.axis("off")
plt.subplot(245), plt.imshow(img_inverse-eroded_4, cmap = 'gray'),plt.title('图像腐蚀_核4'),plt.axis("off")
plt.subplot(246), plt.imshow(img_inverse-eroded_5, cmap = 'gray'),plt.title('图像腐蚀_核5'),plt.axis("off")
plt.subplot(247), plt.imshow(img_inverse-eroded_6, cmap = 'gray'),plt.title('图像腐蚀_核6'),plt.axis("off")
plt.subplot(248), plt.imshow(np.abs(eroded_5-eroded_6)*150, cmap = 'gray'),plt.title('5与6做差'),plt.axis("off")
plt.show()
#################
plt.rcParams['font.sans-serif']=['SimHei']
plt.figure(figsize=(10, 5))  # width * height
plt.subplot(241), plt.imshow(img_inverse-img, cmap = 'gray'),plt.title('原始图像'),plt.axis("off")
plt.subplot(242), plt.imshow(img_inverse-dilated_1, cmap = 'gray'),plt.title('图像膨胀_核1'),plt.axis("off")
plt.subplot(243), plt.imshow(img_inverse-dilated_2, cmap = 'gray'),plt.title('图像膨胀_核2'),plt.axis("off")
plt.subplot(244), plt.imshow(img_inverse-dilated_3, cmap = 'gray'),plt.title('图像膨胀_核3'),plt.axis("off")

plt.subplot(245), plt.imshow(img_inverse-dilated_4, cmap = 'gray'),plt.title('图像膨胀_核4'),plt.axis("off")
plt.subplot(246), plt.imshow(img_inverse-dilated_5, cmap = 'gray'),plt.title('图像膨胀_核5'),plt.axis("off")
plt.subplot(247), plt.imshow(img_inverse-dilated_6, cmap = 'gray'),plt.title('图像膨胀_核6'),plt.axis("off")
plt.subplot(248), plt.imshow(np.abs(dilated_5-dilated_6)*150, cmap = 'gray'),plt.title('5与6做差'),plt.axis("off")
plt.show()


#【8.3】图像的开运算与闭运算

import cv2
import numpy
import matplotlib.pyplot as plt

#读取图像
img = cv2.imread("8.2.jpg", cv2.IMREAD_GRAYSCALE)

#设置卷积核
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))

#iterations 为迭代次数
img_C=cv2.erode(img, kernel,iterations = 1)
img_D= cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)  # 图像开运算，迭代三次
img_E = cv2.dilate(img_D, kernel)
img_F= cv2.morphologyEx(img_D, cv2.MORPH_CLOSE, kernel)  # 图像闭运算，迭代三次？？？
kernel=np.ones((1,5),np.uint8)
img_G= cv2.morphologyEx(img_F, cv2.MORPH_OPEN, kernel)
#用来正常显示中文标签
plt.rcParams['font.sans-serif']=['SimHei']
#图像显示
plt.figure(figsize=(10, 5))  # width * height
plt.subplot(161), plt.imshow(img, cmap = 'gray'),plt.title('图A'),plt.axis("off")
plt.subplot(162), plt.imshow(img_C, cmap = 'gray'),plt.title('图C'),plt.axis("off")
plt.subplot(163), plt.imshow(img_D, cmap = 'gray'),plt.title('图D'),plt.axis("off")
plt.subplot(164), plt.imshow(img_E, cmap='gray'), plt.title('图E'), plt.axis("off")
plt.subplot(165), plt.imshow(img_F, cmap='gray'), plt.title('图F'), plt.axis("off")
plt.subplot(166), plt.imshow(img_G, cmap='gray'), plt.title('图G'), plt.axis("off")
plt.show()


#【8.5】使用形态学处理提取边界

import cv2
import numpy
import matplotlib.pyplot as plt

#读取图像
img = cv2.imread("8.3.jpg", cv2.IMREAD_GRAYSCALE)

#设置卷积核
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
#图像膨胀处理
dilate_img = cv2.dilate(img, kernel)
#图像腐蚀处理
erode_img = cv2.erode(img, kernel)
print(type(erode_img))
#将两幅图像相减获得边；cv2.absdiff参数：(膨胀后的图像，腐蚀后的图像)
absdiff_img = cv2.absdiff(dilate_img, erode_img);
#上面得到的结果是灰度图，将其二值化以便观察结果
retval, threshold_img = cv2.threshold(absdiff_img, 40, 255, cv2.THRESH_BINARY);

#用来正常显示中文标签
plt.rcParams['font.sans-serif']=['SimHei']
#图像显示
plt.figure(figsize=(10, 5))  # width * height
plt.subplot(121), plt.imshow(img, cmap = 'gray'),plt.title('原始图像'),plt.axis("off")
plt.subplot(122), plt.imshow(threshold_img, cmap = 'gray'),plt.title('边界提取'),plt.axis("off")
plt.show()


#【8.5】形态学处理进行区域填充（孔洞填充）

import numpy as np
import cv2
from matplotlib import pyplot as plt

#读取图像
img = cv2.imread("8.4.jpg")

# 二值化
imgray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
imgray[imgray < 100] = 0
imgray[imgray >= 100] = 255

# 对原图取补得到MASK图像
mask = 255 - imgray

# 构造Marker图像
marker = np.zeros_like(imgray)
marker[0, :] = 255
marker[-1, :] = 255
marker[:, 0] = 255
marker[:, -1] = 255
marker_0 = marker.copy()
print(marker_0)
# 形态学重建
#设置卷积核
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
while True:
    marker_pre = marker
    dilation = cv2.dilate(marker, kernel)
    marker = np.min((dilation, mask), axis=0)
    if (marker_pre == marker).all():
        break
result = 255 - marker

#用来正常显示中文标签
plt.rcParams['font.sans-serif']=['SimHei']

#用来正常显示中文标签
plt.rcParams['font.sans-serif']=['SimHei']
# 图像显示
plt.figure(figsize=(10, 5))  # width * height
plt.subplot(1, 2, 1), plt.imshow(img, cmap='gray'), plt.title('原始图像'), plt.axis("off")
plt.subplot(1, 2, 2), plt.imshow(result, cmap='gray'), plt.title('区域填充'), plt.axis("off")
plt.show()



#【8.5】使用形态学进行连通分量的提取

import numpy as np
import cv2
from matplotlib import pyplot as plt
from PIL import Image

#第一步：阈值处理

img = Image.open('8.5.jpg')
# 模式L”为灰色图像
Img = img.convert('L')
# 自定义灰度界限，大于这个值为黑色，小于这个值为白色
threshold = 200  #阈值
table = []
for i in range(256):
    if i < threshold:
        table.append(0)
    else:
        table.append(1)
# 图片二值化
photo = Img.point(table, '1')
photo.save("8.6.jpg")

#第二步：图像腐蚀

img1 = cv2.imread('8.6.jpg')  #经阈值处理后的图像
#设置卷积核
kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(5, 5))
eroded = cv2.erode(img1, kernel)
cv2.imwrite('8.7.jpg', eroded)

#第三步：求连通分量中的像素数

img_A = cv2.imread('8.7.jpg')
gray_A = cv2.cvtColor(img_A, cv2.COLOR_BGR2GRAY) #转换成灰度图
ret, thresh_A = cv2.threshold(gray_A, 50, 255, cv2.THRESH_BINARY_INV) #灰度图转换成二值图像
thresh_A_copy = thresh_A.copy() #复制thresh_A到thresh_A_copy
thresh_B = np.zeros(gray_A.shape, np.uint8) #thresh_B大小与A相同，像素值为0
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3,3))#3×3结构元

count = [ ] #为了记录连通分量中的像素个数
#循环，直到thresh_A_copy中的像素值全部为0
while thresh_A_copy.any():
    Xa_copy, Ya_copy = np.where(thresh_A_copy > 0) #thresh_A_copy中值为255的像素的坐标
    thresh_B[Xa_copy[0]][Ya_copy[0]] = 255 #选取第一个点，并将thresh_B中对应像素值改为255
    #连通分量算法，先对thresh_B进行膨胀，再和thresh_A执行and操作（取交集）
    for i in range(120):
        dilation_B = cv2.dilate(thresh_B, kernel, iterations=1)
        thresh_B = cv2.bitwise_and(thresh_A, dilation_B)
    #取thresh_B值为255的像素坐标，并将thresh_A_copy中对应坐标像素值变为0
    Xb, Yb = np.where(thresh_B > 0)
    thresh_A_copy[Xb, Yb] = 0
    #显示连通分量及其包含像素数量
    count.append(len(Xb))
    if len(count) == 0:
        print("无连通分量")
    if len(count) == 1:
        print("第1个连通分量包含的像素数{}".format(count[0]))
    if len(count) >= 2:
        print("第{}个连通分量包含的像素数{}".format(len(count), count[-1] - count[-2]))

#用来正常显示中文标签
plt.rcParams['font.sans-serif']=['SimHei']
# 图像显示
plt.figure(figsize=(12, 5))  # width * height
plt.subplot(1, 3, 1), plt.imshow(img, cmap='gray'), plt.title('原始图像'), plt.axis("off")
plt.subplot(1, 3, 2), plt.imshow(img1, cmap='gray'), plt.title('阈值处理'), plt.axis("off")
plt.subplot(1, 3, 3), plt.imshow(eroded, cmap='gray'), plt.title('腐蚀处理'), plt.axis("off")
plt.show()
